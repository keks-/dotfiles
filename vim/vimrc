"----------------------------------------------------
" Author:       Max "keks" Fischer
"
" File:         .vimrc
"----------------------------------------------------

" vim > vi settings
set nocompatible

" encoding
set enc=utf-8

" intending as necessary
filetype plugin indent on

set relativenumber  "show numbers  relative to current line

" The PC is fast enough, do syntax highlight syncing from start
autocmd BufEnter * :syntax sync fromstart

" no backup
set noswapfile
"set backupdir=/tmp

" text layout
set cursorline      " highlight cursor line
set colorcolumn=+1,+2
set showmatch       " jump briefly to matching brace
set showmode        " show current mode
set tabstop=2       " tabs have 2 spaces
set backspace=indent,eol,start     " backspace is able to erase newlines & stuff
set shiftwidth=2    " intending 2 spaces
set expandtab       " for discussion
set textwidth=79    " readable line length
set list            " show these 'invisible' chars
set listchars=eol:$,tab:>-
set wrap

" window layout
set winfixwidth
set winfixheight
set winwidth=80
set winminwidth=40
" NerdTree specific
let g:NERDTreeWinSize = 40


" searching
set incsearch hlsearch
set ignorecase

" {{{ Folding test
if has("folding")
    set foldenable
    set foldmethod=marker
    set foldmarker={{{,}}}
    set foldcolumn=2
    "set foldlevel=100
endif
"}}}

" matching
set matchtime=2
set matchpairs+==:;
set matchpairs+=<:>

" status bar info and appearance - rest done by statusbar.vim
set cmdheight=2
set laststatus=2
set showcmd

" gui options
set guioptions-=m
set guioptions-=T
set guioptions-=r
set guioptions-=l

if has("gui_win32")
    set guifont=Inconsolata:h12:cANSI
else
    set guifont=Iosevka
endif

" Printer
set printdevice=HP_LaserJet_1022

" {{{ keymappings

"paste
nnoremap <F2> :set invpaste paste?<CR>
imap <F2> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F2>

"Reselect visual block after indent/outdent 
vnoremap < <gv
vnoremap > >gv

" Remap arrows to split navigation
nnoremap <Right> <C-w>l
nnoremap <Left> <C-w>h
nnoremap <Up> <C-w>k
nnoremap <Down> <C-w>j

" space bar un-highligts search
:noremap <silent> <Space> :silent noh<Bar>echo<CR>

"'\' is a bit far away for <leader>
let mapleader = ','

"nerdtree
map <F3> <Esc>:NERDTreeToggle<CR> 

"tagbar
map <F4> <Esc>:TagbarToggle<CR>

" copy or paste from X11 clipboard
" http://vim.wikia.com/wiki/GNU/Linux_clipboard_copy/paste_with_xclip
" requires: xclip
" usage: visual mode select then hit F11 to copy
" hit F12 to paste from GUI to vim without formating issues
vmap <F11> :!xclip -f -sel clip<CR>
map <F12> mz:-1r !xclip -o -sel clip<CR>`z

" }}}

set nomore

source ~/.vim/functions.vim

syntax on

if $TERM == 'linux'
    let &t_Co = 8
    color peachpuff
    set nolist
    set colorcolumn+=81
    hi ColorColumn term=none cterm=none ctermbg=3
    hi CursorLine term=none cterm=none ctermbg=none
else
"    hi Cursorline term=none cterm=none ctermbg=17
    " colorscheme neverland-darker
  set t_Co=256
  let base16colorspace=256
  colorscheme base16-ocean
  "set background=dark
endif
highlight MatchParen cterm=bold ctermfg=cyan

" {{{ Specify plugins

call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/sudo.vim'
Plug 'ervandew/supertab'
Plug 'scrooloose/syntastic'
Plug 'majutsushi/tagbar'
Plug 'nvie/vim-flake8'
Plug 'tpope/vim-fugitive'
Plug 'mitsuhiko/vim-python-combined'
Plug 'vimwiki/vimwiki'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }

call plug#end()

" }}}

" {{{ plugin stuff
"
" NERDTree
let NERDTreeIgnore = ['\.pyc$']

" pathogen
"let g:pathogen_disabled = []
"call add(g:pathogen_disabled, 'supertab')

" Airline
if has("gui_running")
  "let g:airline_theme='solarized'
  let g:airline_theme='tomorrow'
  let g:airline_powerline_fonts=1
  "let g:airline_right_alt_sep = ''
  "let g:airline_right_sep = ''
  "let g:airline_left_alt_sep= ''
  "let g:airline_left_sep = ''
  let g:airline_right_sep = ''
  let g:airline_left_sep = ''
else
  let g:airline_powerline_fonts=1
endif
let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n' : 'N',
  \ 'i' : 'I',
  \ 'R' : 'R',
  \ 'c' : 'C',
  \ 'v' : 'V',
  \ 'V' : 'V',
  \ '' : 'V',
  \ 's' : 'S',
  \ 'S' : 'S',
  \ '' : 'S',
  \ }
let g:airline#extensions#whitespace#checks = []
let g:airline_section_y = airline#section#create_right(['%{printf("%s%s",&fenc,&ff!="unix"?":".&ff:"")}'])
let g:airline_section_z = airline#section#create_right(['%3l:%2c'])
let g:airline#extensions#hunks#non_zero_only = 1
let g:airline#extensions#ctrlp#color_template = 'replace'

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_loc_list_height = 4
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_tex_checkers = ['chktex']
let g:syntastic_python_checkers = ['flake8', 'python']

" }}}
